[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "parcels"
description = "Framework for Lagrangian tracking of virtual ocean particles in the petascale age."
readme = "README.md"
dynamic = ["version"]
authors = [{name = "oceanparcels.org team"}]
requires-python = ">=3.10"
license = {file = "LICENSE.md"}
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",
  "Intended Audience :: Science/Research",
]
dependencies = [
  "cgen",
  "cftime",
  "numpy >=1.11",
  "dask",
  "psutil",
  "netCDF4 >=1.1.9",
  "zarr >=2.11.0,!=2.18.0,<3",
  "tqdm",
  "pymbolic",
  "pytest",
  "scipy >=0.16.0",
  "xarray >=0.10.8",
]

[project.urls]
homepage = "https://oceanparcels.org/"
repository = "https://github.com/OceanParcels/parcels"
Tracker = "https://github.com/OceanParcels/parcels/issues"

[tool.setuptools]
packages = ["parcels"]

[tool.setuptools.package-data]
parcels = ["parcels/include/*"]

[tool.setuptools_scm]
write_to = "parcels/_version_setup.py"
local_scheme = "no-local-version"

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]
testpaths = ["tests", "docs/examples"]
python_files = ["test_*.py", "example_*.py", "*tutorial*"]
minversion = "7"
markers = [ # can be skipped by doing `pytest -m "not slow"` etc.
  "flaky: flaky tests",
  "slow: slow tests",
]

filterwarnings = [
  "error:.*removed in a future release of Parcels.*:DeprecationWarning", # Have Parcels DeprecationWarnings fail CI (prevents deprecated items being used in internal code)
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "B",  # Bugbear
    "UP", # pyupgrade
    "LOG", # logging
    "ICN", # import conventions
    "G", # logging-format
    "RUF", # ruff
    "ISC001", # single-line-implicit-string-concatenation
]

ignore = [
    # line too long (82 > 79 characters)
    "E501",
    # ‘from module import *’ used; unable to detect undefined names
    "F403",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # Consider `(slice(2), *block)` instead of concatenation
    "RUF005",
    # Prefer `next(iter(variable.items()))` over single element slice
    "RUF015",
    # Use `X | Y` in `isinstance` (see https://github.com/home-assistant/core/issues/123850)
    "UP038",

    # TODO: ignore for now (requires more work). Remove ignore once fixed
    # Missing docstring in public module
    "D100",
    # Missing docstring in public class
    "D101",
    # Missing docstring in public method
    "D102",
    # Missing docstring in public function
    "D103",
    # Missing docstring in public package
    "D104",
    # Missing docstring in magic method
    "D105",
    # Missing docstring in __init__
    "D400",
    # First line should be in imperative mood (requires writing of summaries)
    "D401",
    # First word of the docstring should not be `This`
    "D404",
    # 1 blank line required between summary line and description (requires writing of summaries)
    "D205",
    # do not use bare except, specify exception instead
    "E722",


    # TODO: These bugbear issues are to be resolved
    "B011", # Do not `assert False`
    "B016", # Cannot raise a literal. Did you intend to return it or raise an Exception?
    "B904", # Within an `except` clause, raise exceptions
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
known-first-party = ["parcels"]

[tool.mypy]
files = [
  "parcels/compilation/codegenerator.py",
  "parcels/_typing.py",
  "parcels/tools/*.py",
  "parcels/grid.py",
  "parcels/field.py",
  "parcels/fieldset.py",
]

[[tool.mypy.overrides]]
module = [
    "parcels._version_setup",
    "mpi4py",
    "scipy.spatial",
    "sklearn.cluster",
    "zarr",
    "cftime",
    "pykdtree.kdtree",
    "netCDF4",
    "cgen"
]
ignore_missing_imports = true
